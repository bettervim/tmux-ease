exception InvalidKey of string

module Keys = struct
  type t =
    | Ctrl
    | Shift
    | AlphabeticLowerCase of string
    | AlphabeticUpperCase of string

  let is_lowercase_alpha key =
    let regex = "^[a-z]$" |> Re.Pcre.re |> Re.compile in
    Re.Pcre.pmatch ~rex:regex key

  let is_uppercase_alpha key =
    let regex = "^[A-Z]$" |> Re.Pcre.re |> Re.compile in
    Re.Pcre.pmatch ~rex:regex key

  let from_string raw_key =
    match raw_key with
    | "ctrl" -> Ctrl
    | "shift" -> Shift
    | key when is_lowercase_alpha key -> AlphabeticLowerCase key
    | key when is_uppercase_alpha key -> AlphabeticUpperCase key
    | key -> raise (InvalidKey ("⚠️  Invalid key provided: " ^ key))
end

module Keywords = struct
  let bind ~key ~command = Core.String.concat ~sep:" " [ "bind"; key; command ]

  let set_global_option ~name ~value =
    Core.String.concat ~sep:" " [ "set -g"; name; value ]
end

let append_line content new_line = content ^ "\n" ^ new_line

let append_lines content lines =
  Core.List.fold lines ~init:content ~f:(fun acc line -> append_line acc line)

let generate_key keys =
  Core.List.fold keys ~init:"" ~f:(fun acc current_key ->
      let parsed_key =
        match current_key |> Keys.from_string with
        | Ctrl -> "C"
        | Shift -> "S"
        | AlphabeticLowerCase raw_key -> raw_key
        | AlphabeticUpperCase raw_key -> raw_key
      in
      let prefix = match acc with "" -> acc | _ -> acc ^ "-" in
      prefix ^ parsed_key)

let generate_prefix_bind (prefix_keys : string list) =
  let key = generate_key prefix_keys in
  Keywords.set_global_option ~name:"prefix" ~value:key

let generate_binds (binds : TmuxConfig.binds) =
  Core.List.map binds ~f:(fun bind ->
      let key = generate_key bind.key in
      Keywords.bind ~key ~command:bind.command)
  |> Core.List.fold ~init:"" ~f:(fun lines bind -> append_line lines bind)

let print (config : TmuxConfig.t) =
  let open TmuxConfig in
  let generated_filename = Arguments.get_generated_filename () in
  let binds =
    config.binds |> Core.Option.value_map ~f:generate_binds ~default:""
  in
  let prefix =
    config.prefix |> Core.Option.value_map ~f:generate_prefix_bind ~default:""
  in
  let header = "# Generated by BetterTmux" in
  let content = append_lines header [ binds; prefix ] in
  Core.Out_channel.write_all generated_filename ~data:content
